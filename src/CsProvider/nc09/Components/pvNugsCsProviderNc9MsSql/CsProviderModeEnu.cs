namespace pvNugsCsProviderNc9MsSql;

/// <summary>
/// Defines the operational modes for the connection string provider, determining how database credentials are managed and retrieved.
/// Each mode corresponds to a different credential management strategy with varying levels of security and complexity.
/// </summary>
/// <remarks>
/// <para>The mode determines which constructor should be used when creating a <see cref="CsProvider"/> instance:</para>
/// <list type="bullet">
/// <item><description><see cref="Config"/> - Use the basic constructor with logger and options only</description></item>
/// <item><description><see cref="StaticSecret"/> - Use the constructor with <c>IPvNugsStaticSecretManager</c></description></item>
/// <item><description><see cref="DynamicSecret"/> - Use the constructor with <c>IPvNugsDynamicSecretManager</c></description></item>
/// </list>
/// </remarks>
public enum CsProviderModeEnu  
{
    /// <summary>
    /// Configuration-based credential management mode.
    /// Database credentials (username and password) are stored directly in the application configuration files.
    /// This is the simplest mode but offers the least security as credentials are stored in plain text.
    /// </summary>
    /// <remarks>
    /// <para><c>Security Level:</c> Low - credentials stored in configuration files</para>
    /// <para><c>Complexity:</c> Low - no external dependencies required</para>
    /// <para><c>Use Case:</c> Development environments, simple applications where security is not a primary concern</para>
    /// <para><c>Credential Source:</c> Application configuration (appsettings.json, environment variables, etc.)</para>
    /// </remarks>
    Config,
    
    /// <summary>
    /// Static secret management mode.
    /// Database passwords are stored in an external secret manager (e.g., Azure Key Vault, AWS Secrets Manager) 
    /// while usernames come from configuration. Passwords are retrieved once and cached until application restart.
    /// </summary>
    /// <remarks>
    /// <para><c>Security Level:</c> Medium - passwords stored in secure secret manager</para>
    /// <para><c>Complexity:</c> Medium - requires secret manager integration</para>
    /// <para><c>Use Case:</c> Production environments where credentials should not be in configuration files</para>
    /// <para><c>Credential Source:</c> Username from configuration, password from secret manager</para>
    /// <para><c>Secret Naming:</c> Uses pattern <c>{SecretName}-{Role}</c> for secret manager queries</para>
    /// </remarks>
    StaticSecret,
    
    /// <summary>
    /// Dynamic secret management mode.
    /// Both username and password are dynamically generated by an external secret manager with automatic expiration.
    /// Credentials are temporary and automatically renewed when they expire, providing the highest level of security.
    /// </summary>
    /// <remarks>
    /// <para><c>Security Level:</c> High - temporary credentials with automatic rotation</para>
    /// <para><c>Complexity:</c> High - requires dynamic secret manager with credential rotation capability</para>
    /// <para><c>Use Case:</c> High-security production environments, zero-trust architectures</para>
    /// <para><c>Credential Source:</c> Both username and password dynamically generated by secret manager</para>
    /// <para><c>Secret Naming:</c> Uses pattern <c>{SecretName}-{Role}</c> for secret manager queries</para>
    /// <para><c>Expiration:</c> Credentials have time-limited validity and are automatically refreshed</para>
    /// </remarks>
    DynamicSecret
}